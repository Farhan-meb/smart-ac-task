// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  studentId String   @unique
  programme String
  university String?
  phone     String?
  timezone  String?  @default("UTC")
  language  String?  @default("en")
  avatar    String?
  isActive  Boolean  @default(true)
  isVerified Boolean @default(false)
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tasks     Task[]
  courses   Course[]
  reminders Reminder[]
  resources Resource[]
  categories Category[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  color       String   @default("#3B82F6")
  description String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks  Task[]

  @@map("categories")
}

model Course {
  id          String   @id @default(cuid())
  code        String
  name        String
  description String?
  credits     Int?
  semester    String?
  year        Int?
  startDate   DateTime?
  endDate     DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks  Task[]

  @@map("courses")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  estimatedHours Float?
  actualHours   Float?
  tags        String? // JSON array of tags
  attachments String? // JSON array of file paths
  isRecurring Boolean      @default(false)
  recurrence  String? // JSON object for recurrence pattern
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId String?
  category   Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  courseId   String?
  course     Course?    @relation(fields: [courseId], references: [id], onDelete: SetNull)
  reminders  Reminder[]
  subtasks   Subtask[]
  timeLogs   TimeLog[]

  @@map("tasks")
}

model Subtask {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(PENDING)
  completedAt DateTime?
  order       Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("subtasks")
}

model Reminder {
  id        String   @id @default(cuid())
  title     String
  message   String?
  type      ReminderType @default(EMAIL)
  scheduledAt DateTime
  isSent    Boolean  @default(false)
  sentAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId String?
  task   Task?  @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  url         String?
  filePath    String?
  fileSize    Int?
  tags        String? // JSON array of tags
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("resources")
}

model TimeLog {
  id          String   @id @default(cuid())
  startTime   DateTime
  endTime     DateTime?
  duration    Float? // in minutes
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("time_logs")
}

// Enums
enum UserRole {
  STUDENT
  ADMIN
  INSTRUCTOR
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ReminderType {
  EMAIL
  PUSH
  SMS
}

enum ResourceType {
  DOCUMENT
  LINK
  VIDEO
  IMAGE
  OTHER
} 